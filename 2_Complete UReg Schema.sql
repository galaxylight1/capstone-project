-- Create URegBase, if not already made
SET FOREIGN_KEY_CHECKS = 1;

USE URegBase;

DROP TABLE IF EXISTS POLICY;
DROP TABLE IF EXISTS REGULATION_CLASSIFICATION;
DROP TABLE IF EXISTS REGULATION;
DROP TABLE IF EXISTS CITATION_CLASSIFICATION;
DROP TABLE IF EXISTS CITATION;
DROP TABLE IF EXISTS REGULATION_CITATION;
DROP TABLE IF EXISTS STAKEHOLDER_CLASSIFICATION;
DROP TABLE IF EXISTS STAKEHOLDER;
DROP TABLE IF EXISTS REGULATION_STAKEHOLDER;
DROP TABLE IF EXISTS REVISION;
DROP TABLE IF EXISTS REVISION_PROCESS;

-- Create Tables

-- Policy Table
CREATE TABLE POLICY (
POL_ID INT PRIMARY KEY NOT NULL,
POL_NUMBER VARCHAR(2000) NOT NULL,
POL_TITLE VARCHAR(1000) NOT NULL,
POL_VERSION_NUMBER INT,
POL_STORAGE_LINK VARCHAR(5000),
POL_NOTES TEXT
);

-- Regulation Classification Table
CREATE TABLE REGULATION_CLASSIFICATION (
REG_CLASSIFICATION_ID INT PRIMARY KEY NOT NULL,
REG_CLASSIFICATION_NAME VARCHAR(1000) NOT NULL
);

-- Regulation Table
CREATE TABLE REGULATION (
REG_ID INT PRIMARY KEY NOT NULL,
REG_NUMBER VARCHAR(2000) NOT NULL,
REG_TITLE VARCHAR(2000) NOT NULL,
REG_VERSION_NUMBER INT,
POL_ID INT NOT NULL,
REG_CLASSIFICATION_ID INT NOT NULL,
REG_STATUS VARCHAR(20),
REG_EFFECTIVE_DATE DATE,
REG_METADATA VARCHAR(1000),
REG_LAST_REVIEW_DATE DATE,
REG_NOTES TEXT,
REG_INTERIM_OR_FINAL VARCHAR(20),
REG_EDITORIAL_REV_YN BOOLEAN,
REG_REV_FLAG_YN BOOLEAN,
REG_REV_FLAG_NOTES VARCHAR(5000),
REG_WEBSITE_LINK VARCHAR(2000) NOT NULL,
IS_REG_BEING_REVISED BOOLEAN,
REG_STORAGE_LINK VARCHAR(2000),
DIRECT_DOCUMENT_LINK VARCHAR(2000),
CONSTRAINT fk_reg_pol_id FOREIGN KEY (POL_ID) REFERENCES POLICY (POL_ID),
CONSTRAINT fk_reg_classification FOREIGN KEY (REG_CLASSIFICATION_ID) REFERENCES REGULATION_CLASSIFICATION (REG_CLASSIFICATION_ID)
);

-- Citation Classification Table
CREATE TABLE CITATION_CLASSIFICATION (
CITATION_CLASSIFICATION_ID INT PRIMARY KEY NOT NULL,
CITATION_CLASSIFICATION_NAME VARCHAR(1000) NOT NULL
);

-- Citation Table
CREATE TABLE CITATION (
CITATION_ID INT PRIMARY KEY NOT NULL,
CITATION_NAME VARCHAR(1000) NOT NULL,
CITATION_STORAGE_LINK VARCHAR(2000),
CITATION_CLASSIFICATION_ID INT NOT NULL,
REG_ID INT NOT NULL,
CITATION_NOTES VARCHAR(5000),
CONSTRAINT fk_citation_regulation_id FOREIGN KEY (REG_ID) REFERENCES REGULATION (REG_ID),
CONSTRAINT fk_citation_citation_classification_id FOREIGN KEY (CITATION_CLASSIFICATION_ID) REFERENCES CITATION_CLASSIFICATION (CITATION_CLASSIFICATION_ID)
);

-- Regulation and Citation Junction Table
CREATE TABLE REGULATION_CITATION (
REG_ID INT NOT NULL,
CITATION_ID INT NOT NULL,
PRIMARY KEY (REG_ID, CITATION_ID),
CONSTRAINT fk_reg_citation_reg_id FOREIGN KEY (REG_ID) REFERENCES REGULATION (REG_ID),
CONSTRAINT fk_reg_citation_citation_id FOREIGN KEY (CITATION_ID) REFERENCES CITATION (CITATION_ID)
);

-- Stakeholder Classification Table
CREATE TABLE STAKEHOLDER_CLASSIFICATION (
STAKEHOLDER_CLASSIFICATION_ID INT PRIMARY KEY NOT NULL,
STAKEHOLDER_CLASSIFICATION_NAME VARCHAR(1000) NOT NULL
);

-- Stakeholder Table
CREATE TABLE STAKEHOLDER (
STAKEHOLDER_ID INT PRIMARY KEY NOT NULL,
STAKEHOLDER_CLASSIFICATION_ID INT NOT NULL,
STAKEHOLDER_NAME VARCHAR(1000),
STAKEHOLDER_POSITION VARCHAR(1000),
STAKEHOLDER_NOTES VARCHAR(1000),
CONSTRAINT fk_stakeholder_classification_id FOREIGN KEY (STAKEHOLDER_CLASSIFICATION_ID) REFERENCES STAKEHOLDER_CLASSIFICATION (STAKEHOLDER_CLASSIFICATION_ID)
);

-- Regulation and Stakeholder Junction Table
CREATE TABLE REGULATION_STAKEHOLDER (
REG_ID INT NOT NULL,
STAKEHOLDER_ID INT NOT NULL,
PRIMARY KEY (REG_ID, STAKEHOLDER_ID),
CONSTRAINT fk_reg_stakeholder_reg_id FOREIGN KEY (REG_ID) REFERENCES REGULATION (REG_ID),
CONSTRAINT fk_reg_stakeholder_id FOREIGN KEY (STAKEHOLDER_ID) REFERENCES STAKEHOLDER (STAKEHOLDER_ID)
);

-- Revision Table
CREATE TABLE REVISION (
REVISION_ID INT PRIMARY KEY NOT NULL,
REG_ID INT NOT NULL,
REVISION_NUMBER INT NOT NULL, 
REVISION_DATE DATE,
REVISION_EFFECTIVE_DATE DATE,
REVISION_DESC TEXT,
EDITORIAL_CHANGE_YN BOOLEAN,
REV_EDITORIAL_DATE DATE,
REV_EDITORIAL_DESC TEXT,
DOCUMENTATION_OF_OTHER_REVISION_LINK VARCHAR(2000),
CONSTRAINT fk_revision_reg_id FOREIGN KEY (REG_ID) REFERENCES REGULATION (REG_ID)
);

-- Revision Process Table
CREATE TABLE REVISION_PROCESS (
REVISION_PROCESS_ID INT PRIMARY KEY NOT NULL,
REVISION_ID INT NOT NULL,
BOT_APPROVAL_DATE DATE,
BOT_APPROVAL_STATUS VARCHAR(3),
BOT_PREVIOUS_APPROVAL_DATE DATE,
ASEC_APPROVAL_DATE DATE,
ASEC_APPROVAL_STATUS VARCHAR(3),
ASEC_PREVIOUS_REVISION_DATE DATE,
ASEC_PREVIOUS_REVISION_REVIEW_DATE DATE,
IPC_APPROVAL_DATE DATE,
IPC_APPROVAL_STATUS VARCHAR(3),
IPC_PREVIOUS_REVISION_DATE DATE,
IPC_PREVIOUS_REVISION_REVIEW_DATE DATE,
REVISION_PROCESS_NOTES VARCHAR(1000),
CONSTRAINT fk_revision_process_revision_id FOREIGN KEY (REVISION_ID) REFERENCES REVISION (REVISION_ID)
);


-- Example Views

-- Views citations in regulations
CREATE VIEW Regulation_Citations_VIEW AS
SELECT REG_NUMBER, CITATION_NAME, CITATION_CLASSIFICATION_NAME
FROM REGULATION
INNER JOIN REGULATION_CITATION ON REGULATION.REG_ID = REGULATION_CITATION.REG_ID
INNER JOIN CITATION ON REGULATION_CITATION.CITATION_ID = CITATION.CITATION_ID
INNER JOIN CITATION_CLASSIFICATION ON CITATION.CITATION_CLASSIFICATION_ID = CITATION_CLASSIFICATION.CITATION_CLASSIFICATION_ID;

SELECT * FROM Regulation_Citations_VIEW;


-- Views stakeholders of policies
CREATE VIEW Regulations_Policies_Stakeholders AS
SELECT R.REG_ID, R.REG_NUMBER, R.REG_TITLE, R.REG_VERSION_NUMBER, P.POL_NUMBER, P.POL_TITLE, P.POL_VERSION_NUMBER,
       S.STAKEHOLDER_NAME, S.STAKEHOLDER_POSITION, 
       CASE WHEN EXISTS (SELECT 1 FROM REVISION WHERE REG_ID = R.REG_ID) THEN 'Yes' ELSE 'No' END AS HAS_REVISIONS
FROM REGULATION R
INNER JOIN POLICY P ON R.POL_ID = P.POL_ID
LEFT JOIN REGULATION_STAKEHOLDER RS ON R.REG_ID = RS.REG_ID
LEFT JOIN STAKEHOLDER S ON RS.STAKEHOLDER_ID = S.STAKEHOLDER_ID;

SELECT * FROM Regulations_Policies_Stakeholders;


-- Views detailed Regultions data
CREATE VIEW Regulation_Details_Extended AS
SELECT R.REG_ID, R.REG_NUMBER, R.REG_TITLE, R.REG_VERSION_NUMBER, P.POL_NUMBER, P.POL_TITLE, P.POL_VERSION_NUMBER,
       S.STAKEHOLDER_NAME, S.STAKEHOLDER_POSITION,
       C.CITATION_NAME, C.CITATION_STORAGE_LINK,
       RV.REVISION_NUMBER, RV.REVISION_DATE, RV.REVISION_EFFECTIVE_DATE, RV.REVISION_DESC
FROM REGULATION R
INNER JOIN POLICY P ON R.POL_ID = P.POL_ID
LEFT JOIN REGULATION_STAKEHOLDER RS ON R.REG_ID = RS.REG_ID
LEFT JOIN STAKEHOLDER S ON RS.STAKEHOLDER_ID = S.STAKEHOLDER_ID
LEFT JOIN REGULATION_CITATION RC ON R.REG_ID = RC.REG_ID
LEFT JOIN CITATION C ON RC.CITATION_ID = C.CITATION_ID
LEFT JOIN REVISION RV ON R.REG_ID = RV.REG_ID;

SELECT * FROM Regulation_Details_Extended;


-- Views a summary of revisions
CREATE VIEW Regulation_Revisions_Summary AS
SELECT R.REG_NUMBER, R.REG_TITLE, COUNT(RV.REVISION_ID) AS REVISION_COUNT, MIN(RV.REVISION_DATE) AS FIRST_REVISION_DATE, MAX(RV.REVISION_DATE) AS LATEST_REVISION_DATE
FROM REGULATION R
LEFT JOIN REVISION RV ON R.REG_ID = RV.REG_ID
GROUP BY R.REG_NUMBER, R.REG_TITLE;

SELECT * FROM Regulation_Revisions_Summary;


-- Views all revisions with only editorial changes
CREATE VIEW Regulation_Editorial_Revisions AS
SELECT R.REG_NUMBER, R.REG_TITLE, RV.REVISION_NUMBER, RV.REVISION_DATE, RV.REVISION_DESC
FROM REGULATION R
INNER JOIN REVISION RV ON R.REG_ID = RV.REG_ID
WHERE R.REG_EDITORIAL_REV_YN = TRUE;

SELECT * FROM Regulation_Editorial_Revisions;


